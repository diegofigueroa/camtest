<!DOCTYPE html>  
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
  <title>Taller Android: Camara, AsyncTask & Notificaciones</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <style>
/* 
   This document has been created with Marked.app <http://markedapp.com>, Copyright 2011 Brett Terpstra
   Please leave this notice in place, along with any additional credits below.
   ---------------------------------------------------------------
   Some simple Github-like styles, with syntax highlighting CSS via Pygments (requires custom processor).
   via https://github.com/alampros/Docter
*/
html {
	margin:0;
	padding:1em;
}
body{
    -webkit-font-smoothing: antialiased;
	font: 13.34px helvetica,arial,freesans,clean,sans-serif;
	line-height: 1.4em;
	color: #333;
	border: none;
	line-height: 1.5;
	margin: 0 auto;
    max-width: 900px; 
	text-align:left;
	color:black;
    background:#fff;
}

img {max-width:100%}

@media screen {
    #wrapper { padding:9px; background:#F8F8F8;	border:1px solid #E9E9E9;}    
    body.inverted, .inverted #wrapper {
        color: #eee;
        background:#333;
        border-color:#555
    }
    .inverted h2 {
        border-color:#555
    }
    .inverted hr {
        border-color: #777;
        border-width: 1px !important;
    }
}
h1 {
	font-size: 170%;
	border-top: 4px solid #aaa;
	padding-top: .5em;
	margin-top: 1.5em;
}

h1:first-child {
	margin-top: 0 !important;
	padding-top: .25em !important;
	border-top: none !important;
}

h2 {
	font-size: 150%;
	margin-top: 1.5em;
	border-top: 4px solid #e0e0e0;
	padding-top: .5em;
}

h3 {
	margin-top: 1em;
}

p {
	margin: 1em 0!important;
	line-height: 1.5em!important;
}

pre, code {
    font: 12px 'Bitstream Vera Sans Mono','Courier',monospace;
}
pre {
    -webkit-box-shadow: rgba(0, 0, 0, 0.0664062) 0px 1px 2px 0px inset;
    background-color: #EEE;
    border: #ddd 1px solid;
    color: #444;
    display: block;
    margin: 12px 0;
    overflow: auto;
    padding: 5px;
    white-space: pre;
    max-width:100%;
    overflow:auto;
}
code {
    background-color: ghostWhite;
    color: #444!important;
    padding: 0 .2em;
    border: 1px solid #DEDEDE;
}
pre code {
    padding: 0!important;
    font-size: 12px!important;
    background-color: #EEE!important;
    border: none!important;
    overflow:visible;
}
a, a code {
	color: #4183C4;
	text-decoration:none;
}

table td {
	border-bottom: 1px solid #DDD!important;
	padding: .2em 1em!important;
}

.shadow{
	-webkit-box-shadow:0 5px 15px #000;
	-moz-box-shadow:0 5px 15px #000;
	box-shadow:0 5px 15px #000;		
}


.c{color:#998;font-style:italic;}
.err{color:#a61717;background-color:#e3d2d2;}
.k{font-weight:bold;}
.o{font-weight:bold;}
.cm{color:#998;font-style:italic;}
.cp{color:#999;font-weight:bold;}
.c1{color:#998;font-style:italic;}
.cs{color:#999;font-weight:bold;font-style:italic;}
.gd{color:#000;background-color:#fdd;}
.gd .x{color:#000;background-color:#faa;}
.ge{font-style:italic;}
.gr{color:#a00;}
.gh{color:#999;}
.gi{color:#000;background-color:#dfd;}
.gi .x{color:#000;background-color:#afa;}
.go{color:#888;}
.gp{color:#555;}
.gs{font-weight:bold;}
.gu{color:#800080;font-weight:bold;}
.gt{color:#a00;}
.kc{font-weight:bold;}
.kd{font-weight:bold;}
.kn{font-weight:bold;}
.kp{font-weight:bold;}
.kr{font-weight:bold;}
.kt{color:#458;font-weight:bold;}
.m{color:#099;}
.s{color:#d14;}
.na{color:#008080;}
.nb{color:#0086B3;}
.nc{color:#458;font-weight:bold;}
.no{color:#008080;}
.ni{color:#800080;}
.ne{color:#900;font-weight:bold;}
.nf{color:#900;font-weight:bold;}
.nn{color:#555;}
.nt{color:#000080;}
.nv{color:#008080;}
.ow{font-weight:bold;}
.w{color:#bbb;}
.mf{color:#099;}
.mh{color:#099;}
.mi{color:#099;}
.mo{color:#099;}
.sb{color:#d14;}
.sc{color:#d14;}
.sd{color:#d14;}
.s2{color:#d14;}
.se{color:#d14;}
.sh{color:#d14;}
.si{color:#d14;}
.sx{color:#d14;}
.sr{color:#009926;}
.s1{color:#d14;}
.ss{color:#990073;}
.bp{color:#999;}
.vc{color:#008080;}
.vg{color:#008080;}
.vi{color:#008080;}
.il{color:#099;}

.poetry pre {
    font-family:Georgia, Garamond, serif !important;
    font-style:italic;
    font-size:110% !important;
    line-height:1.6em;
    display:block;
    margin-left:1em;
}

.poetry pre code {
    font-family:Georgia, Garamond, serif !important;
}

sup,sub,a.footnote {
	font-size: 1.4ex;
	height: 0;
	line-height: 1;
	vertical-align: super;
	position: relative;
}
sub {
    vertical-align: sub;
    top: -1px;
}

@media print {
    body {
        background:#fff;
    }
    img, pre, blockquote, table, figure {
        page-break-inside: avoid
    }
    .footnotes { page-break-before: always }
    #wrapper {
        background: #fff;
        border:none;
    }
    code {
        background-color: #fff;
        color: #444!important;
        padding: 0 .2em;
        border: 1px solid #DEDEDE;
    }
    pre code {
        background-color: #fff!important;
        overflow:visible;
    }
    pre {
        background: #fff;
    }
}
</style>

</head>
<body class="normal">
  <div id="wrapper">
      <h1 id="devtoolsbootcamp:notes">Taller Android: C&aacute;mara, AsyncTask, Notificaciones</h1>

<p><b>Presentaci&oacute;n:</b> <a href="https://docs.google.com/presentation/d/1IlBRgHOTIo9IPgTYxxCtImeBc8tXfyuuiclkqWfMCJo/edit" target="_blank">Ver</a><br/>
<b>C&oacute;digo:</b> <a href="https://github.com/diegofigueroa/camtest/zipball/master">Descargar</a></p>

<h2 id="requirements">Requisitos</h2>
<ul>
  <li>Computadora con el SDK de Android instalado (Platform 10 mínimo (Gingerbread)).</li>
  <li>Eclipse IDE con ADT</li>
  <li>Dispositivo Android (2.3.3 mínimo) o AVD</li>
</ul>


<h2 id="exercise0:importandbuildsampleproject">0: Importar proyecto de ejemplo</h2>

<h2 id="goal">Objetivo</h2>

<p>Importar el c&oacute;digo de ejemplo que se provee, compilarlo y configurarlo para ejecturarlo en el dispositivo o en el emulador.</p>

<h2 id="procedure">Procedimiento</h2>

<h3 id="loadthecodefolderintoeclipseasanewproject.">1. Cargar el directorio con el <code>c&oacute;digo</code> en un nuevo proyecto de Eclipse.</h3>

<ol>
<li>Select <code>File &gt; New Project...</code> in Eclipse. Select <code>Android &gt; Andorid Project...</code>.</li>
<li>Choose <code>Create project from existing source</code>.</li>
<li>Select the <code>Code</code> folder for <code>Location:</code>.</li>
<li>Press Finish (all other settings can be left at their defaults).</li>
</ol>

<h3>2. Crear un AVD (si no tiene un dispositivo Android)</h3>

<ol>
<li>Vaya a <code>Window &gt; AVD Manager</code> en Eclipse.</li>
<li>Click en el boton <code>New...</code>.</li>
<li>Use Gingerbread (2.3.3) target (API Level 10).</li>
<li>Seleccione <code>ARM</code> CPU/ABI, a menos que tenga Intel HAXM instalado.</li>
<li style="color:red">Seleccione el tama&nacute;o de la tarjeta SD en 64 MB.</li>
<li>Si est&aacute; utilizando <code>ARM</code> CPU, habilite la aceleraci&oacute;n de hardware para gr&aacute;ficos, agregando la propiedad <code>GPU emulation</code>, con valor <code>true</code>.</li>
<li style="color:red">Agregue la propiedad <code>Configures camera facing back</code>, con valor <code>emulated</code>.</li>
</ol>

<h3>3. Ejecute la aplicaci&oacute;n</h3>

<ol>
<li>Ejecute la aplicaci&oacute;n como <code>Android application</code>.</li>
</ol>

<h2 id="troubleshooting">Troubleshooting</h2>

<ul>
<li><p>Si aparecen errores de <code>R.*</code> no encontrado, intente lo siguiente:</p></li>
<li><p>Project &gt; Clean&#8230;</p></li>
<li><p>Project &gt; Build Automatically (Uncheck/Re-Check)</p></li>
<li><p>Restart Eclipse</p></li>
</ul>

<h2>1. Revisar Android Manifest</h2>
<h2>Objetivo</h2>
<p>Examinar y entender las directivas en el manifesto de Android necesarias para una aplicación con acceso a la c&aacute;mara.</p>
<h2>Procedimiento</h2>

<ol>
  <li>Abra el archivo llamado <code>camTest Manifest</code></li>
  <li>Revise la siguiente secci&oacute;n:</li>
</ol>
<pre><code>	< uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
	< uses-permission android:name="android.permission.CAMERA" />
	< uses-permission android:name="android.permission.INTERNET" />
	< uses-feature android:name="android.hardware.camera" android:required="false"/>
</code></pre>
<p>Qu&eacute; puede concluir de dicha secci&oacute;n?</p>

<h2>2. MainActivity.java</h2>
<h2>Objetivo</h2>
<p>Examinar el c&oacute;digo utilizado para iniciar la aplicaci&oacute;n de la c&aacute;mara.</p>

<h2>2.1 Fotos</h2>
<ul>
  <li>Abra el archivo llamado <code>MainActivity.java</code></li>
  <li>Busque la secci&oacute;n bajo el siguiente comentario:</li>
</ul>
<pre><code>	/*	PASO 2.1: <-------------     CORTE AQUI
</code></pre>
<ul>
  <li>Remueva el comentario</li>
  <li>Compile y ejecute el c&oacute;digo.</li>
</ul>

<h2>2.2 Video</h2>
<ul>
  <li>Abra el archivo llamado <code>MainActivity.java</code></li>
  <li>Busque la secci&oacute;n bajo el siguiente comentario:</li>
</ul>
<pre><code>	/*	PASO 2.2: <-------------     CORTE AQUI
</code></pre>
<ul>
  <li>Remueva el comentario</li>
  <li>Compile y ejecute el c&oacute;digo.</li>
</ul>

<h2>2.3 Recibir el resultado</h2>
<ul>
  <li>Abra el archivo llamado <code>MainActivity.java</code></li>
  <li>Busque la secci&oacute;n bajo el siguiente comentario:</li>
</ul>
<pre><code>	/*	PASO 2.3: <-------------     CORTE AQUI
</code></pre>
<ul>
  <li>Remueva el comentario</li>
  <li>Compile y ejecute el c&oacute;digo.</li>
</ul>

<h2>2.4 Operar sobre el resultado</h2>
<ul>
  <li>Abra el archivo llamado <code>MainActivity.java</code></li>
  <li>Busque la secci&oacute;n bajo el siguiente comentario:</li>
</ul>
<pre><code>	/*	PASO 2.4: <-------------     CORTE AQUI
</code></pre>
<ul>
  <li>Remueva el comentario</li>
  <li>Compile y ejecute el c&oacute;digo.</li>
</ul>

<h2>3. UploadTask.java</h2>
<h2>Objetivo</h2>
<p>Examinar el c&oacute;digo utilizado para subir fotograf&iacute;as a un servicio en l&iacute;nea en background, sin bloquear la interfaz.</p>

<h2>Procedimiento</h2>
<ol>
  <li>Abra el archivo llamado <code>UploadTask.java</code></li>
  <li>Revise el m&eacute;todo <code>doInBackground</code></li>
  <li>Revise el m&eacute;todo <code>onPostExecute</code></li>
</ol>


<h2>4. Notificaciones (MainActivity.java y UploadTask.java)</h2>
<h2>Objetivo</h2>
<p>Examinar el c&oacute;digo utilizado para generar notificaciones seg&uacute;n suceden distintos eventos.</p>

<h2>4.1 Notificaciones de texto</h2>
<ul>
  <li>Abra el archivo llamado <code>MainActivity.java</code></li>
  <li>Busque la secci&oacute;n bajo el siguiente comentario:</li>
</ul>
<pre><code>	/*	PASO 4.1: <-------------     CORTE AQUI
</code></pre>
<ul>
  <li>Remueva el comentario</li>
  <li>Compile y ejecute el c&oacute;digo.</li>
</ul>

<h2>4.2.1 Notificaciones personalizadas</h2>
<ul>
  <li>Abra el archivo llamado <code>MainActivity.java</code></li>
  <li>Busque la secci&oacute;n bajo el siguiente comentario:</li>
</ul>
<pre><code>	// PASO 4.2.1
</code></pre>
<ul>
  <li>Comentaree el c&oacute;digo en dicha secci&oacute;n (4 l&iacute;neas)</li>
</ul>

<h2>4.2.2 Notificaciones personalizadas</h2>
<ul>
  <li>Abra el archivo llamado <code>MainActivity.java</code></li>
  <li>Busque la secci&oacute;n bajo el siguiente comentario:</li>
</ul>
<pre><code>	/*	PASO 4.2.2: <-------------     CORTE AQUI
</code></pre>
<ul>
  <li>Remueva el comentario</li>
  <li>Compile y ejecute el c&oacute;digo.</li>
</ul>

<h2>4.3 Notificaciones personalizadas</h2>
<ol>
  <li>Abra el archivo llamado <code>UploadTask.java</code></li>
  <li>Revise el m&eacute;todo <code>updateNotification</code></li>
</ol>
